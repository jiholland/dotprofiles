#!/bin/zsh

# =================== General ==================

[ -z "$PS1" ] && return                    # If not running interactively, don't do anything.

if [ -z "$ZSHRC_SOURCED" ]; then           # Prevent doublesourcing by adding the following to ~/.zprofile:
  ZSHRC_SOURCED="yes"                      # [[ "$ZSHRC_SOURCED" != "yes" && -r "$HOME/.zshrc" ]] && source "$HOME/.zshrc"
fi

export LANG='POSIX'                        # Use posix encoding for console output.
autoload -U compinit; compinit             # Enable the zsh completion system.
unsetopt BEEP                              # Disable terminal bell.
setopt AUTO_CD                             # Change directory without using cd command.
setopt PROMPT_SUBST                        # Enable parameter expansion, command substitution and arithmetic expansion in the prompt.

# =================== History ==================

export HISTFILE="$HOME/.zsh_history"       # The file to save the history.
export SAVEHIST="2000"                     # Maximum number of history events to save in history file.
export HISTSIZE="2000"                     # Maximum number of events stored in the internal history list.
setopt APPEND_HISTORY                      # Append history list to history file.

# =================== PATH =====================

BREW_PREFIX="/opt/homebrew"                # Default brew prefix for macOS with ARM chip. Change as needed.

if [ -d "$BREW_PREFIX/bin" ]
then
  if [[ "$PATH" != *"$BREW_PREFIX/sbin:"* ]]
  then
    PATH="$BREW_PREFIX/sbin:$PATH"         # Add homebrew's sbin to PATH
  fi
  if [[ "$PATH" != *"$BREW_PREFIX/bin:"* ]]
  then
    PATH="$BREW_PREFIX/bin:$PATH"          # Add homebrew's bin to PATH   
  fi
  if [[ "$FPATH" != *"$BREW_PREFIX/share/zsh/site-functions:"* ]]
  then                                     # Make homebrew's completions available in zsh.
    FPATH="$BREW_PREFIX/share/zsh/site-functions:$FPATH"
  fi
fi

unset -v BREW_PREFIX                       # Remove the BREW_PREFIX variable.

if (which pyenv &>/dev/null); then
  if [[ "$PATH" != *"$HOME/.pyenv/bin:"* ]]; then
    PATH="$HOME/.pyenv/bin:$PATH"          # Add pyenv's bin to PATH.
  fi
  eval "$(pyenv init -)"                   # Install pyenv as shell function, enable shims and autocompletion.
fi

export PATH
export FPATH

# =================== Prompt ===================

if (which git &>/dev/null); then           # Git branch function for prompt.
  git_branch() { git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1) /'; }
else
  git_branch() { :; }
fi

if [[ "$TERM" == "xterm"*||"vte"* ]]       # If colors are "supported", set prompt with colors.
then
  PS1="%f[%F{green}%n%f@%f%m %F{cyan}%2~ %F{yellow}${git_branch}%f]%f%(!.#.$) "
else
  PS1="[%n@%m %2~ ${git_branch}]%(!.#.$) " # [ username@hostname working-dir git-branch ]prompt-indicator
fi

unset -f git_branch                        # Remove the parse_git_branch function.

# =================== Aliases ==================

if [[ "$TERM" == "xterm"*||"vte"* ]]
then                                       # If colors are "supported", add colors to various commands.
  export LSCOLORS='GxFx'                   # Export colors for ls command (directory, symbolic link and leave the rest to default values).
  alias ls='ls --color' 
  alias grep='grep --color'
  if (which tree &>/dev/null); then
    alias tree='tree -C'
  fi
fi

alias ll='ls -l'                           # Long format.
alias la='ls -laF'                         # Long format, include dot ('.') directories and display ('/'),('*'),('%'),('@'),('='),('|').
alias c='clear'

if (which vim &>/dev/null); then
  alias vi='vim'
  export VISUAL='vim'                      # Set vim as default visual editor.
fi

if (which git &>/dev/null); then
  alias s='git status'
fi

if [ -r "$HOME/.aliases" ]; then
  source "$HOME/.aliases"                  # Source additional aliases.
fi
