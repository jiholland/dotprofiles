---
- name: Install dotprofiles with Ansible.
  connection: local
  gather_facts: false
  hosts: localhost

  tasks:

    - name: Gather facts.
      tags: always
      ansible.builtin.setup:
        gather_subset:
          - min

    - name: Install dotbashprofiles if shell is bash.
      tags: bash
      ansible.builtin.template:
        src: "{{ item['src'] }}"
        dest: "{{ item['dest'] }}"
        mode: u=rw,g=r,o=r
        backup: true
      when: ansible_facts['user_shell'] is ansible.builtin.search('bash')
      loop:
        - src: .bash_profile
          dest: "{{ ansible_facts['user_dir'] }}/.bash_profile"
        - src: .bashrc
          dest: "{{ ansible_facts['user_dir'] }}/.bashrc"
        - src: .bash_aliases
          dest: "{{ ansible_facts['user_dir'] }}/.bash_aliases"

    - name: Ensure directory for tmux is present.
      tags: tmux
      ansible.builtin.file:
        path: "{{ ansible_facts['user_dir'] }}/.config/tmux"
        mode: u=rwx,g=rx,o=rx
        state: directory

    - name: Install configuration for tmux.
      tags: tmux
      ansible.builtin.template:
        src: .config/tmux/tmux.conf
        dest: "{{ ansible_facts['user_dir'] }}/.config/tmux/tmux.conf"
        mode: u=rw,g=r,o=r
        backup: true

    - name: Fix path in tmux for macOS.
      tags: tmux
      ansible.builtin.lineinfile:
        path: "{{ ansible_facts['user_dir'] }}/.config/tmux/tmux.conf"
        line: set-option -g default-command "{{ ansible_facts['env']['SHELL'] }}"
        insertafter: EOF
        state: present
      when: ansible_facts['distribution'] is eq('MacOSX')

    - name: Backup nvim.
      tags: nvim
      block:

        - name: Backup nvim.
          ansible.builtin.copy:
            src: "{{ ansible_facts['user_dir'] }}/.config/nvim/"
            dest: "{{ ansible_facts['user_dir'] }}/.config/nvim.{{ ansible_facts['date_time']['epoch'] }}"
            mode: u=rwx,g=rx,o=rx
            remote_src: false

        - name: Delete nvim directory.
          ansible.builtin.file:
            path: "{{ ansible_facts['user_dir'] }}/.config/nvim/"
            state: absent

      rescue:

        - name: Ensure directories for nvim is present.
          ansible.builtin.file:
            path: "{{ ansible_facts['user_dir'] }}/.config/nvim"
            mode: u=rwx,g=rx,o=rx
            state: directory


    - name: Find and register all directories in .config/nvim
      tags: nvim
      ansible.builtin.find:
        paths: "{{ playbook_dir }}/.config/nvim"
        recurse: true
        file_type: directory
      register: __nvim_directories

    - name: Ensure directories for nvim is present.
      tags: nvim
      ansible.builtin.file:
        path: "{{ ansible_facts['user_dir'] }}/.config/nvim/{{ item.split('nvim')[-1] }}"
        state: directory
        mode: u=rwx,g=rx,o=rx
      loop: "{{ __nvim_directories['files'] | map(attribute='path') }}"

    - name: Find and register all files in .config/nvim
      tags: nvim
      ansible.builtin.find:
        paths: "{{ playbook_dir }}/.config/nvim"
        recurse: true
        file_type: file
      register: __nvim_files

    - name: Install dotfiles for nvim.
      tags: nvim
      ansible.builtin.template:
        src: "{{ item }}"
        dest: "{{ ansible_facts['user_dir'] }}/.config/nvim{{ item.split('.config/nvim')[-1] }}"
        mode: u=rw,g=r,o=r
        backup: true
      loop: "{{ __nvim_files['files'] | map(attribute='path') }}"


    - name: Install tmux and nvim dependencies.
      tags:
        - tmux
        - nvim
      block:

        - name: Install tmux and nvim dependencies.
          ansible.builtin.package:
            name:
              - xclip
              - ripgrep
            state: present

      rescue:

        - name: Print dependencies.
          ansible.builtin.debug:
            msg: Consider manually installing xclip and ripgrep.
            verbosity: 0
