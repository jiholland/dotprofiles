---
- name: Install dotprofiles with Ansible.
  hosts: localhost
  gather_facts: false
  connection: local

  tasks:

    - name: Gather facts.
      tags: always
      ansible.builtin.setup:
        gather_subset:
          - min

    - name: Install dotbashprofiles if shell is bash.
      tags: shell
      ansible.builtin.template:
        src: "{{ item['src'] }}"
        dest: "{{ item['dest'] }}"
        mode: u=rw,g=r,o=r
        backup: true
      when: ansible_facts['user_shell'] is ansible.builtin.search('bash')
      loop:
        - src: .bash_profile
          dest: "{{ ansible_facts['user_dir'] }}/.bash_profile"
        - src: .bashrc
          dest: "{{ ansible_facts['user_dir'] }}/.bashrc"

    - name: Ensure directory for ansible log is present.
      tags: ansible
      ansible.builtin.file:
        path: "{{ ansible_facts['user_dir'] }}/.ansible/log/hosts"
        mode: u=rwx,g=wrx,o=rx
        owner: "{{ ansible_facts['user_uid'] }}"
        group: "{{ ansible_facts['user_gid'] }}"
        state: directory

    - name: Install ansible.cfg
      tags: ansible
      ansible.builtin.template:
        src: .ansible.cfg
        dest: "{{ ansible_facts['user_dir'] }}/.ansible.cfg"
        mode: u=rw,g=r,o=r
        backup: true

    - name: Install dotaliases.
      tags: alias
      ansible.builtin.template:
        src: .aliases
        dest: "{{ ansible_facts['user_dir'] }}/.aliases"
        mode: u=rw,g=r,o=r
        backup: true

    - name: Ensure directory for tmux is present.
      tags: tmux
      ansible.builtin.file:
        path: "{{ ansible_facts['user_dir'] }}/.config/tmux"
        state: directory
        mode: u=rwx,g=rx,o=rx

    - name: Install tmux.conf for tmux.
      tags: tmux
      ansible.builtin.template:
        src: .config/tmux/tmux.conf
        dest: "{{ ansible_facts['user_dir'] }}/.config/tmux/tmux.conf"
        mode: u=rw,g=r,o=r
        backup: true

    - name: Find all directories in .config/nvim
      tags: nvim
      ansible.builtin.find:
        paths: "{{ playbook_dir }}/.config/nvim"
        recurse: true
        file_type: directory
      register: neovim_directories

    - name: Ensure directories for neovim is present.
      tags: nvim
      ansible.builtin.file:
        path: "{{ ansible_facts['user_dir'] }}/.config/nvim/{{ item.split('nvim')[-1] }}"
        state: directory
        mode: u=rwx,g=rx,o=rx
      loop: "{{ neovim_directories['files'] | map(attribute='path') }}"

    - name: Find all files in .config/neovim
      tags: nvim
      ansible.builtin.find:
        paths: "{{ playbook_dir }}/.config/nvim"
        recurse: true
        file_type: file
      register: neovim_files

    - name: Install dotfiles for neovim.
      tags: nvim
      ansible.builtin.template:
        src: "{{ item }}"
        dest: "{{ ansible_facts['user_dir'] }}/.config/nvim{{ item.split('.config/nvim')[-1] }}"
        mode: u=rw,g=r,o=r
        backup: true
      loop: "{{ neovim_files['files'] | map(attribute='path') }}"
